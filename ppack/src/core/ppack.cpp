  /*
 * Implementation of ppack class - 23 nov 2020
 * statsgen method:  Compute statistis of a wordlist
 * maskgen methos:   Generate mask from the statistics generated by statsgen
 * policygen method: Generate a set of mask with some requirements
 *
 * Reimplementation PPACK class - 25 nov 2020
 * COMPLETED: (27 nov 2020)
 * The base class is defined in include/basepoli.hpp
 * and implemented in src/basepoli.cpp
 * --- Separate Base class of ppack.hhp in its own head file and its implementation file ---
 *
 *
 *
 * COMPLETED: (3 dec 2020)
 * --- Use pstruct class to manage the parameter of statsgen, maskgen and policygen ---
 *
 *
 * Maintainer: glozanoa <glozanoa@uni.pe>
*/


#include <cstdlib>
#include <iomanip>
#include <iostream>
#include <fstream>
#include <string>
#include <vector>

using namespace std;

#include "../include/csv.hpp"
#include "../include/core/ppack.hpp"
#include "../include/core/statsgen.hpp"
#include "../include/core/maskgen.hpp"
#include "../include/core/policygen.hpp"


void PPACK::statsgen(Sargs sargs)
{
  statstruct stats = coreStatsgen(sargs);
  writeStatsgen(stats, sargs);
}

void PPACK::maskgen(Margs margs)
{
  CSVReader statsgen(margs.statsgen);

  vector<vector<string>> results = statsgen.getData(); //results of statsgen

  if(!margs.quiet)
    cout << Logo::randomLogo() << endl;
  ofstream *maskgenOutput;

  try
  {
    coreMaskgen(maskgenOutput, results, margs);
  }
  catch (std::exception& error) {
    cerr << error.what() << endl;
    exit(EXIT_FAILURE);
  }
}

void PPACK::policygen(Pargs pargs)
{
  try
  {

    if(pargs.output == "")
      throw Exception("No output file supplied!");

    if(pargs.quiet == false) // print the ppack logo
      cout << Logo::randomLogo() << endl;

    if(pargs.pretty)
    {
      FinePrint::status("Saving generated masks to [" + pargs.output + "]");
      FinePrint::status("Using " + to_string(pargs.threads) + " threads.");
      FinePrint::status("Password policy:");
    }
    else {
      cout << "[*] Saving generated masks to [" + pargs.output + "]" << endl;
      cout << "[*] Using " << pargs.threads << " threads." << endl;
      cout << "[*] Password policy:" << endl;
    }
    cout << "\t" << "Password Lengths: "  << " min:" << setw(2) << pargs.minlength
                                          << " max:" << setw(2) << pargs.maxlength << endl;

    cout << "\t" << "Minimun strength: "  << " l:" << setw(3) << pargs.minlower
                                          << " u:" << setw(3) << pargs.minupper
                                          << " d:" << setw(3) << pargs.mindigit
                                          << " s:" << setw(3) << pargs.minspecial << endl;

    cout << "\t" << "Maximun strength: "  << " l:" << setw(3) << pargs.maxlower
                                          << " u:" << setw(3) << pargs.maxupper
                                          << " d:" << setw(3) << pargs.maxdigit
                                          << " s:" << setw(3) << pargs.maxspecial << endl;
    corePolicygen(pargs); //do almost all the work()
  }
  catch(std::exception& error)
  {
    cout << error.what() << endl;
    exit(EXIT_FAILURE);
  }
}
