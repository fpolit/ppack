/**
 * @file maskgen.cpp
 * @author glozanoa (gacuna@protonmail.com)
 * @brief Generate customized mask for crack passwords.
 * @version 0.1
 * @date 2020-09-27
 * 
 * @copyright Copyright (c) 2020
 * 
 */

#ifndef __INCLUDE_STD_IOSTREAM_H__
#define __INCLUDE_STD_IOSTREAM_H__
#include <iostream>
#endif //__INCLUDE_STD_IOSTREAM_H__

#ifndef __INCLUDE_STD_VECTOR_H_
#define __INCLUDE_STD_VECTOR_H_
#include<vector>
#endif //__INCLUDE_STD_VECTOR_H_


#ifndef __INCLUDE_PROGRAM_OPTIONS_H__
#define __INCLUDE_PROGRAM_OPTIONS_H__
#include<boost/program_options.hpp>
#endif //__INCLUDE_PROGRAM_OPTIONS_H__

//using namespace boost;
namespace po = boost::program_options;


#ifndef __INCLUDE_PPACK_H__
#define __INCLUDE_PPACK_H__
#include "../include/ppack.hpp"
#endif // __INCLUDE_PPACK_H__


#ifndef __INCLUDE_LOGOS_H__
#define __INCLUDE_LOGOS_H__
//#include "../include/logos.hpp"
#endif //__INCLUDE_LOGOS_H__

#ifndef __INCLUDE_MASK_H__
#define __INCLUDE_MASK_H__
#include "../include/mask.hpp"
#endif //__INCLUDE_MASK_H__

using namespace std;


int main(int argc ,char* argv[])
{
    try
    {
        //IO parameters (files)
        string statsgen_output;
        string output;

        //print parameters (print)
        bool show;
        bool quiet;                           
        
        //checkmask parameters (mask_compare)
        vector<Mask> checkmasks;
        string checkmasksfile;

        //password charset (password struct-password)
        vector<string> charset;                            

        //length parameters (password struct)
        int minlength;
        int maxlength;

        //complexity parameters (password struct)
        int mincomplexity;
        int maxcomplexity;

        //occurrence parameters (frequency)
        int minoccurrence;
        int maxoccurrence;

        //parallel parameters (parallel)
        unsigned int threads;                                             

        

        po::options_description files("Files I/O");
        files.add_options()
            ("statsgen, s", po::value<string>(), "File generated by statsgen.")
            ("output, o", po::value<string>(&output)->default_value("maskgen.hcmasks"), "Ouput File.");

        po::options_description print("Print");
        print.add_options()
            ("hiderare", po::value<bool>(&show)->implicit_value(true)->default_value(false), "Show generated masks.")
            ("quiet, q", po::value<bool>(&quiet)->implicit_value(true)->default_value(false), "Quiet printing(Omit PPACK logo).");

        po::options_description mask_compare("Compare mask o file of mask against an already cracked list.");
        mask_compare.add_options()
            ("checkmasks", po::value<vector<Mask>>(), "Masks to compare.")
            ("checkmasksfile", po::value<string>(), "File of mask to compare.");
            
        
        po::options_description password("Password Structure");
        password.add_options()
            ("charset, c", po::value<vector<string>>(), "Password's charset.")
            ("minlength", po::value<int>(&minlength)->default_value(-1)->implicit_value(-1), "Minimum password length.")
            ("maxlength", po::value<int>(&maxlength)->default_value(-1)->implicit_value(-1), "Maximum password length.")
            ("mincomplexity", po::value<int>(&mincomplexity)->default_value(0), "Minimum password Complexity.")
            ("maxcomplexity", po::value<int>(&maxcomplexity)->default_value(100), "Maximum password Complexity.");
                    

        po::options_description frequency("Mask Ocurrence");
        frequency.add_options()
            ("minoccurrence", po::value<int>(&minoccurrence)->default_value(0), "Minimum of mask occurrences.")
            ("maxoccurrence", po::value<int>(&maxoccurrence)->default_value(-1), "Maximum of mask occurrences.");


        po::options_description parallel("Paralelization");
        parallel.add_options()
            ("threads, t", po::value<unsigned int>(&threads)->default_value(2), "Number of threads.");

        po::options_description maskgen("Generate customized mask for crack passwords");
        maskgen.add_options()
            ("version, v", "PPACK version.")
            ("help, h", "Show help.");
        maskgen.add(files).add(print).add(mask_compare).add(password).add(frequency).add(parallel);

        po::variables_map vm;

        store(po::command_line_parser(argc, argv).
                options(maskgen).run(), vm);

        if(vm.count("help")){
            cout << maskgen << endl;
            return 1;
        }

        if(vm.count("version"))
        {
            //cout << "PPACK  version " + ppack::VERSION << endl;
            cout << "PPACK  version 0.1"  << endl;

            return 1;
        }

        if(vm.count("statsgen"))
        {
            statsgen_output = vm["statsgen"].as<string>();
            // Finalize implementation of classes
            PPACK ppack();
            ppack.maskgen(statsgen_output, output,              //IO parameters 
                        show, quiet,                            //print parameters
                        checkmasks, checkmasksfile,             //checkmask parameters
                        charset,                                //password charset
                        minlength, maxlength,                   //length parameters
                        mincomplexity, maxcomplexity,           //complexity parameters
                        minoccurrence, maxoccurrence,           //occurrence parameters
                        threads);
        }
        else
        {
            cout << "No statsgen file supplied." << endl;
            cout << maskgen << endl;
            return 1;
        }
    }
    catch(std::exception& e)
    {
        cout << e.what() << endl;
        return 1;
    }
    return 0;
}