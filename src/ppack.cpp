  /*
 * Implementation of ppack class - 23 nov 2020
 * statsgen method:  Compute statistis of a wordlist
 * maskgen methos:   Generate mask from the statistics generated by statsgen
 * policygen method: Generate a set of mask with some requirements
 *
 * Reimplementation PPACK class - 25 nov 2020
 * COMPLETED: (27 nov 2020)
 * The base class is defined in include/basepoli.hpp
 * and implemented in src/basepoli.cpp
 * --- Separate Base class of ppack.hhp in its own head file and its implementation file ---
 *  
 *
 *
 * NO COMPLETED
 * --- Use pstruct class to manage the parameter of statsgen, maskgen and policygen ---
 *
 *
 * Maintainer: glozanoa <glozanoa@uni.pe>
*/



#ifndef __INCLUDE_PPACK_H__
#define __INCLUDE_PPACK_H__
#include "../include/ppack.hpp"
#include <cstdlib>
#include <exception>
#include <fstream>
#include <iomanip>
#endif //__INCLUDE_PPACK_H__


//////////////////////////////////////////////
////////// statsgen  implementation   ////////
//////////////////////////////////////////////

bool sfilter(Password passwd, sstruct pargs)
{
  // add more complx filter
  if(Password::checkLength(passwd, pargs.minlength, pargs.maxlength))
    return true;
  return false;
}

vector<Password> passwdBlock(ifstream *wordlist, int block, sstruct pargs)
{
  string passwd;
  vector<Password> vpasswd;
  while((getline(*wordlist, passwd) && passwd!="") && vpasswd.size() <= block)
    {
      Password password(passwd);
      if(sfilter(passwd,  pargs))
        vpasswd.push_back(password);
    }

  getline(*wordlist, passwd);
  if(passwd=="")
    wordlist->close(); //closing wordlist file because it hasn't more passwords

  return vpasswd;
}

statstruct coreStatsgen(sstruct pargs)
{
  ifstream *wordlist  = new ifstream(pargs.wordlist);
  int block = 1000; // max block of pasword to read from wordlists
  statstruct stats; //stats of wordlists
  
  try{
    while(wordlist->is_open()) // ensure that you close the wordlist when it hasn't more password
    {
      //this function read at most 'block' filtered passwords. 
      vector<Password> vpasswd = passwdBlock(wordlist, block, pargs); 

      //#pragma omp parallel for shared(vpasswd, sstruct)
      for(int k=0; k<vpasswd.size(); k++)
        {
          Password passwd = vpasswd.at(k);

          //length password stats
          int passwdSize = passwd.size();
          if(stats.length.find(passwdSize) != stats.length.end())
              stats.length[passwdSize] += 1;
          else
              stats.length[passwdSize] = 1;
            
          // Character set stats
          SCS passwdSCS = passwd.getSCS();
          if(stats.scs.find(passwdSCS) != stats.scs.end())
              stats.scs[passwdSCS] += 1;
          else
              stats.scs[passwdSCS] = 1;


          // advance mask stats
          Mask passwdMask = passwd.getMask();
          if(stats.mask.find(passwdMask) != stats.mask.end())
              stats.mask[passwdMask] += 1;
          else
            stats.mask[passwdMask] = 1;
        }
    }
    return stats;
  }
  catch (std::exception& error)
  {
    cerr << error.what() << endl;
    wordlist->close();
    exit(EXIT_FAILURE);
  }
  
}

// void printStatsgen(statstruct stats, sstruct pargs)
// {
//   if(!pargs.quiet)
//     cout << Logo::randomLogo() << endl;
//   FinePrint::status("Analyzing passwords in [" + pargs.wordlist + "]");
//   FinePrint::empty();
  
//   FinePrint::status("Length:");
//   for(auto [length, occurence]: stats.length)
//   {
//       cout  << FinePrint::greenText("[+]") 
//             << setw(25) << length << ": "
//             << setw(5)  << "N%"
//             << " (" << occurence << ")" << endl;
//   }

//   FinePrint::status("Simple charset:");
//   for(auto [scs, occurence]: stats.scs)
//   {
//       cout  << FinePrint::greenText("[+]") 
//             << setw(25) << scs << ": "
//             << setw(5)  << "N%"
//             << " (" << occurence << ")" << endl;
//   }

//   FinePrint::status("Masks:");
//   for(auto [mask, occurence]: stats.mask)
//   {
//       cout  << FinePrint::greenText("[+]") 
//             << setw(25) << mask << ": "
//             << setw(5)  << "N%"
//             << " (" << occurence << ")" << endl;
//   }
  
//   FinePrint::successful("Analized 100% (TOTAL)");
// } 

void PPACK::statsgen(sstruct pargs)
{
  statstruct stats = coreStatsgen(pargs);
  
  // print to console the computed stats
  //printStatsgen(stats, pargs);
}


////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////// maskgen implementation   /////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////


bool checkOccurrence(unsigned int maskOccurrence, unsigned int minoccurence, int maxoccurence)
{
  if(maxoccurence != -1)
  {
    if(maskOccurrence >= minoccurence && maskOccurrence <= maxoccurence)
    return true;
  }  
  else
  {
    if(maskOccurrence >= minoccurence)
    return true;
  }
  return false;
}

bool mFilter(Mask mask, unsigned int occurrence, mstruct pargs)
{
  //Mask mask(mask_str);
  if(Mask::checkLength(mask, pargs.minlength, pargs.maxlength) &&
     //checkChartset(mask, mskgn.charsets) &&
     checkOccurrence(occurrence, pargs.minoccurrence, pargs.maxoccurrence) &&
     Mask::checkComplexity(mask, pargs.mincomplexity, pargs.maxcomplexity))
    return true;
  return false;
}

// void maskgen(string statsgen_output, string output,    //IO parameters
//              bool show, bool quiet,                           //print parameters
//              vector<Mask> checkmasks,string checkmasksfile,       //checkmask parameters
//              vector<string> charset,                            //password charset
//              int minlength, int maxlength,                         //length parameters
//              int mincomplexity, int maxcomplexity,                 //complexity parameters
//              int minoccurrence, int maxoccurrence)                 //occurrence parameters

void maskgenWrite(ofstream *maskgenOutput, vector<vector<string>> statsgenResults, mstruct pargs)
/*
 * first element in statsgenResults is mask and
 * second element is occurence of the mask(first element)
*/
{
  if(pargs.show)
  {
    for(int k=0; k < statsgenResults.size(); k++)
    {
      // first element in statsgen output is mask and
      // second element is occurence of the mask(first element)
      Mask mask(statsgenResults[k][0]);
      int occurence = stoi(statsgenResults[k][1]); //convert from string to interger

      if(mFilter(mask, occurence, pargs))
      {
        //write mask to maskgenOutput file
        cout << mask << endl;
      }
    }
    maskgenOutput->close();
  } 
  else {
    for(int k=0; k < statsgenResults.size(); k++)
    {
      // first element in statsgen output is mask and
      // second element is occurence of the mask(first element)
      Mask mask(statsgenResults[k][0]);
      int occurence = stoi(statsgenResults[k][1]); //convert from string to interger

      if(mFilter(mask, occurence, pargs))
      {
        cout <<  "Only write mask to maskgenOutput file" << endl;
      }
    }
    maskgenOutput->close();
    }

}
void PPACK::maskgen(mstruct pargs)
{
  CSVReader statsgen(pargs.statsgen);

  vector<vector<string>> results = statsgen.getData(); //results of statsgen
  //#pragma omp parallel for shared(statsgen_results)

  if(!pargs.quiet)
  {
    //string ppack_logo = Logo::random();
    cout << " -------- MASKGEN --------" << endl;
  }
  ofstream *maskgenOutput = new ofstream(pargs.output);

  try 
  {
    maskgenWrite(maskgenOutput, results, pargs);
  }
  catch (std::exception& error) {
    cerr << error.what() << endl;
    maskgenOutput->close();
    exit(EXIT_FAILURE);
  }
}

namespace ppack{
  string VERSION = "1.0";
  int release = 1;
}

//////////////////////////////////////////////
////////// policygen implementation   ////////
//////////////////////////////////////////////

void PPACK::policygen(pstruct pargs)
{
  
  if(pargs.quiet == false) // print the ppack logo
    {
      //string ppack_logo = Logo::random();
      cout << "LOGO PPACK" << endl;
    }
  //fine::print_status("Saving generated masks to [" + pargs.output +".hcmask]");
  cout << "Saving generated masks to [" + pargs.output +".hcmask]" << endl;
  //fine::print_status("Using 8 OMP Threads.");

  corePolicygen(pargs); //do almost all the work()
}
